$colorList: (
	white: #fff,
	yellow: #ffff00,
	green: #008000,
);

@mixin color-variable-generator(
	$colorName: white,
	$colorValue: #fff,
	$colorMap: $colorList,
	$def: "!default"
) {
	$dollar-sign: "$";
	@each $colorName, $colorValue in $colorMap {
		#{$dollar-sign}#{$colorName}: $colorValue
			#{$def}; // don't use this line . use instead of $colorName-3 variable .
		#{$dollar-sign}#{$colorName}-1: lighten($colorValue, 30%) #{$def};
		#{$dollar-sign}#{$colorName}-2: lighten($colorValue, 15%) #{$def};
		#{$dollar-sign}#{$colorName}-3: $colorValue #{$def};
		#{$dollar-sign}#{$colorName}-4: darken($colorValue, 15%) #{$def};
		#{$dollar-sign}#{$colorName}-5: darken($colorValue, 30%) #{$def};
	}
}
// @include color-variable-generator($colorList) ;// use example

// responsive breakpoints columns creator mixin

$breakpoints: (
	// 	bp1: 1400,
	// bp = breakpoint
	bp3: 992,
	bp4: 768,
	bp5: 576
);
@mixin column-divide-with-breakpoints(
	$map: $breakpoints,
	$totalColumn: 10,
	$widthUnite: "%",
	$widthValue: 100 / $totalColumn
) {
	@each $Breakpoints, $BreakpointsValue in $map {
		@if $BreakpointsValue > 1200 {
			$style-direction: min;
			$BreakpointsValue: 992;
		} @else {
			$style-direction: max;
		}
		@media only screen and  (#{$style-direction}-width: #{$BreakpointsValue}) {
			@for $i from $totalColumn through 1 {
				.col__#{$Breakpoints}-#{$i} {
					flex: 1 1 $widthValue * $i#{$widthUnite};
				}
			}
		}
	}
}
/* use example */
//  @include column-divide-with-breakpoints();

// responsive without breakpoints columns creator mixin

@mixin column-divide-without-breakpoints($totalColumn: 12, $widthUnite: "%") {
	@for $i from $totalColumn through 1 {
		.col__#{$i} {
			flex: 1 1 $widthValue * $i#{$widthUnite};
		}
	}
}

/* use example */
// @include column-divide-without-breakpoints()

// calculation type classes making .
@mixin calculation-type-classes(
	$className: "gap",
	$totalClass: 10,
	$property: "gap",
	$property-value-unite: "rem"
) {
	@for $i from 1 through $totalClass {
		.#{$className}__#{$i} {
			#{$property}: 0.5 * $i#{$property-value-unite};
		}
	}
}
// Use //  @include calculation-type-classes();
